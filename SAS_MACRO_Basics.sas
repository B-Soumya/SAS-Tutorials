/*
1. MACRO VARIABLES
2. MACRO PROGRAM
3. MACRO DEBUGGING
*/


/**_________________________________MACRO VARIABLES_________________________________**/
proc print data = sashelp.cars;
run;

proc print data = sashelp.class;
run;


/* Create Macro Variables Using %LET */
%LET make_name = 'Audi';
%LET type_name = 'Sports';
proc print data = sashelp.cars;
where make = &make_name and type = &type_name ;
   TITLE "Sales as of &SYSDAY &SYSDATE";
run;



/* Using CALL SYMPUT or CALL SYMPUTX (Inside a DATA step) */
data _null_;
if 0 then set sashelp.class nobs=n;
call symputx ('nrows',n);
run;
%put no. of rows = &nrows.;

data _null_;
if 0 then set sashelp.class nobs=n;
call symput ('nrows',n);
run;
%put no. of rows = &nrows.;

/* Use Case: extract the name and age of the first student from "sashelp.class" dataset */
data _null_;
set sashelp.class;
if _N_ = 1 then do;
call symputx('myname', name);
call symputx('myage', Age);
end;
run;

%put Name = &myname.;
%put Age = &myage.;
%put Name_with_Age = &myname. (&myage. years);



/* Automatic Macro Variables */
/* Go to: https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/allprodslang/syntaxByType-macroAutoVariable.htm */
%put Today is &SYSDATE9 and time is &SYSTIME;



/* HOMEWORK SAS MACRO 1:
Q1: How do you define a macro variable?
Q2: What’s the difference between %LET and CALL SYMPUT?
Q3: What’s the difference between CALL SYMPUT and CALL SYMPUTX?
Q4: What are automatic macro variables? Name a few.
Q5: How do you print the value of a macro variable?
Q6: What happens if you reference an undefined macro variable?
Q7: What is the difference between &macrovar and &&macrovar?
*/



/**_________________________________MACRO PROGRAM_________________________________**/
/* Macro program ➡ a block of code enclosed between %MACRO and %MEND that can be reused */
%macro print_class;
  proc print data=sashelp.class;
run;
%mend;
%print_class



/* Macro Parameters ➡ Allows flexibility and avoids confusion due to order.*/
/* 1. Positional Parameters */
%macro greet(name);
  %put Hello, &name!;
%mend;
%greet(John)

/* 2. Keyword Parameters */
%macro summary(ds=, var=);
  proc means data=&ds;
    var &var;
  run;
%mend;
%summary(ds=sashelp.cars, var=mpg_city)

%macro columns(ds=);
	proc transpose data=&ds. (obs=0);
	   var _all_;
	run;
%mend;
%columns(ds=sashelp.cars)



/* Conditional Logic in Macros */
%macro check_age(age);
  %if &age >= 18 %then %put Adult;
  %else %put Minor;
%mend;

%check_age(21)



/* HOMEWORK SAS MACRO 2:
Q1: What is %MACRO and %MEND?
Q2: What’s the syntax of calling a macro?
Q3: What is the difference between positional and keyword parameters?
Q4: Can you use IF-THEN logic in macros?
Q5: What is %PUT used for?
Q6: How do you pass dataset and variable names as parameters to macros?
Q7: What happens if you miss a %MEND?
Q8: Can macros call other macros?
*/



/**_________________________________MACRO DEBUGGING_________________________________**/


/* OPTIONS MPRINT */
/* Purpose: Shows the actual SAS statements that are generated by your macro after macro resolution. */
/* Use When: You want to see what SAS code is actually being executed behind the scenes. */
options mprint;
%macro printme(ds);
  proc print data=&ds;
run;
%mend;
%printme(sashelp.class)

/* OPTIONS MLOGIC */
/* Purpose: Shows macro logic flow: macro execution, parameter passing, IF-ELSE, loop iterations, etc. */
/* Use When: You want to trace how your macro flows internally — conditions, loops, macro calls. */
options mlogic;
%macro check_age(age);
  %if &age >= 18 %then %put Adult;
  %else %put Minor;
%mend;
%check_age(21)


/* OPTIONS SYMBOLGEN */
/* Purpose: Shows how macro variables are resolved — their values and substitutions. */
/* Use When: You're unsure if a macro variable is defined or resolved to the correct value. */
options symbolgen;
%let var = height;
proc print data=sashelp.class;
  var &var;
run;


/* Recommended Debugging Combo */

/* You can turn them on all at once for full macro debugging:  */
options mprint mlogic symbolgen;

/* To turn them off: */
options nomprint nomlogic nosymbolgen;

/* HOMEWORK SAS MACRO 3:
Q1: When should you use MPRINT vs. SYMBOLGEN?
Q2: How do you debug a macro loop?
Q3: I don’t see my expected macro variable value. What to check? 
*/
